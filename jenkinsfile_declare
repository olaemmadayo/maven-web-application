pipeline{
  agent any 
  tools{
    maven "maven3.8.2"
  }
  //option{}
  //triggers{}
 stages{
  stage('1clone'){
    steps{
      sh "echo ready to automate build"
      //git "https://github.com/olaemmadayo/maven-web-application"
      git 'https://github.com/olaemmadayo/maven-web-application'
      sh "echo latest application version collected from SCM"
    }
  }
  stage('2testandBuild'){
    steps{
     sh "echo build process starts"
     sh "mvn clean package"
     sh "echo build process ends"
    }
  }
  stage('3code Quality'){
     steps{
     sh "echo code quality review start"
     sh "mvn sonar:sonar"
     sh "echo code quality review ends"
   }
  }
  stage('4uploadArtifactory'){
     steps{
     sh "mvn deploy"
     sh "echo Artifactory upload ends"
   } 
  }
  stage('5Deployment'){
    steps{
    //deploy adapters: [tomcat9(credentialsId: 'tomcat9-cridentials', path: '', url: 'http://3.94.187.67/:8080')], contextPath: null, war: 'target/*war'
    deploy adapters: [tomcat9(credentialsId: 'tomcat9-cridentials', path: '', url: 'http://3.94.187.67:8080/')], contextPath: null, war: 'target/*war'
   sh "echo deployment to production completed successfully "
    }
   }
  }
 post{
  failure{
         emailext body: '''Hi Team,
Build failed
Landmark Technologies''', recipientProviders: [developers(), contributor()], subject: 'build status', to: 'developers'
  }
  success{       emailext body: '''Hi Team,
Build failed
Landmark Technologies''', recipientProviders: [developers(), contributor()], subject: 'build status', to: 'developers'
}
  always{
         emailext body: '''Hi Team,
Build failed
Landmark Technologies''', recipientProviders: [developers(), contributor()], subject: 'build status', to: 'developers'
  }
 }
}
